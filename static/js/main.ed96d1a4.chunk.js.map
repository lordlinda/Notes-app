{"version":3,"sources":["sidebar/Styles.js","sidebaritem/Styles.js","sidebaritem/SidebarItem.js","Helper.js","sidebar/Sidebar.js","editor/Styles.js","editor/Editor.js","App.js","index.js"],"names":["styles","theme","root","backgroundColor","palette","background","paper","height","position","left","width","boxShadow","newChatBtn","borderRadius","unreadMessage","color","top","right","newNoteBtn","borderBottom","sidebarContainer","marginTop","boxSizing","float","overflowY","overflowX","newNoteInput","margin","outline","border","paddingLeft","newNoteSubmitBtn","listItem","cursor","textSection","maxWidth","deleteIcon","SidebarItem","selectNote","note","index","props","selectedNote","deleteNote","str","this","_note","_index","classes","selectedNoteIndex","key","ListItem","className","selected","alignItems","onClick","ListItemText","primary","title","secondary","body","substring","replace","IconButton","React","Component","withStyles","Sidebar","newNoteBtnClick","setState","addingNote","state","updateTitle","txt","newNote","notes","Button","type","placeholder","onKeyUp","e","target","value","List","map","Divider","titleInput","padding","fontSize","editIcon","editorContainer","Editor","val","a","update","updateBody","text","b","c","d","h","apply","f","g","arguments","clearTimeout","setTimeout","debounce","noteUpdate","id","onChange","App","noteObj","filter","ls","set","noteIndex","indexOf","length","Math","floor","random","newNoteIndex","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed96d1a4.chunk.js","sourcesContent":["const styles = theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    height: 'calc(100% - 35px)',\n    position: 'absolute',\n    left: '0',\n    width: '300px',\n    boxShadow: '0px 0px 2px black'\n  },\n  newChatBtn: {\n    borderRadius: '0px'\n  },\n  unreadMessage: {\n    color: 'red',\n    position: 'absolute',\n    top: '0',\n    right: '5px'\n  },\n  newNoteBtn: {\n    width: '100%',\n    height: '35px',\n    borderBottom: '1px solid black',\n    borderRadius: '0px',\n    backgroundColor: '#29487d',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: '#29487a'\n    }\n  },\n  sidebarContainer: {\n    marginTop: '0px',\n    width: '200px',\n    height: '100%',\n    boxSizing: 'border-box',\n    float: 'left',\n    overflowY: 'scroll',\n    overflowX: 'hidden'\n  },\n  newNoteInput: {\n    width: '100%',\n    margin: '0px',\n    height: '35px',\n    outline: 'none',\n    border: 'none',\n    paddingLeft: '5px',\n    '&:focus': {\n      outline: '2px solid rgba(81, 203, 238, 1)'\n    }\n  },\n  newNoteSubmitBtn: {\n    width: '100%',\n    backgroundColor: '#28787c',\n    borderRadius: '0px',\n    color: 'white'\n  }\n});\n\nexport default styles;","const styles = theme => ({\n  listItem: {\n    cursor: 'pointer'\n  },\n  textSection: {\n    maxWidth: '85%'\n  },  \n  deleteIcon: {\n    position: 'absolute',\n    right: '5px',\n    top: 'calc(50% - 15px)',\n    '&:hover': {\n      color: 'red'\n    }\n  }\n});\n\nexport default styles;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './Styles.js';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { removeHTMLTags } from '../Helper.js';\n\n//this is the individual item of the the motes ie individual note\nclass SidebarItem extends React.Component{\n\trender(){\n\t\tconst {_note,_index,classes,selectedNoteIndex} = this.props\n\t\treturn (\n\t\t\t<div key={_index}>\n\t\t\t<ListItem \n\t\t\tclassName={classes.listItem}\n\t\t\tselected={selectedNoteIndex === _index}\n\t\t\talignItems='flex-start'\n\t\t\t>\n\t\t\t<div className={classes.textSection}\n\t\t\tonClick={()=>this.selectNote(_note,_index)}\n\t\t\t>\n\t\t\t<ListItemText \n \t\t\tprimary={_note.title}\n \t\t\t//this ensures that if the body text is longet than 30 characters it shows three dots\n \t\t\tsecondary={removeHTMLTags(_note.body.substring(0,30))+ '...'}\n\t\t\t></ListItemText>\n\t\t\t</div>\n\t\t\t<IconButton className={classes.deleteIcon} onClick={()=>this.deleteNote(_note)}>\n\t\t\t<DeleteIcon />\n\t\t\t</IconButton>\n            </ListItem>\n\t\t\t</div>\n\t\t\t)\n\t}\n\t///this passes on the note selected to the sidebar item then to the app component\n\tselectNote =(note,index) => this.props.selectedNote(note,index);\n\tdeleteNote =(note)=>{this.props.deleteNote(note)}\n}\nexport default withStyles(styles)(SidebarItem)","export default function debounce(a,b,c){\n  var d,e;\n  return function(){\n    function h(){\n      d=null;\n      c||(e=a.apply(f,g));\n    }\n    var f=this,g=arguments;\n    return (clearTimeout(d),d=setTimeout(h,b),c&&!d&&(e=a.apply(f,g)),e)\n  }\n}\n\nexport function removeHTMLTags (str) {\n  return str.replace(/<[^>]*>?/gm, '');\n};","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './Styles.js';\nimport List from '@material-ui/core/List';\nimport { Divider, Button } from '@material-ui/core';\nimport SidebarItem from '../sidebaritem/SidebarItem.js';\n\n//this component is the side where we have our notes items\nclass Sidebar extends React.Component{\n\t//in this case we are going to have to create a new list item with just\n\t//a title and create a body hence the state\n\t//initially the title and adding note are not operating \n\t//they will be use later in ina ternary opeartor\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state ={\n\t\t\taddingNote:false,\n\t\t\ttitle :null,\n\t\t}\n\t}\n\trender(){\n\t\t//destructuring\n\t\tconst {notes,classes,selectedNoteIndex} = this.props\n\t\t//this function only runs if the notes exist as intitaially is an empty array\n\t\tif(notes){\n\t\treturn (\n\t\t\t<div className ={classes.sidebarContainer}>\n\t\t    <Button onClick={this.newNoteBtnClick}\n\t\t    className={classes.newNoteBtn}\n\t\t    //the text is based is whether the addingNote is true or flase\n\t\t    >{this.state.addingNote ? \"Cancel\" :\"New Note\"}</Button>\n\t\t \n\t\t    {\n\t\t    \tthis.state.addingNote ? \n\t\t    \t<div>\n\t\t    \t<input type=\"text\" \n\t\t\t\tclassName={classes.newNoteInput}\n\t\t\t\tplaceholder=\"Enter  note title\"\n\t\t\t\tonKeyUp ={(e)=>this.updateTitle(e.target.value)}\n\t\t    \t/>\n\t\t    \t<Button className={classes.newNoteSubmitBtn} \n\t\t    \tonClick={this.newNote}>\n\t\t    \tSubmit Note\n\t\t    \t</Button>\n\t\t    \t</div>:\n\t\t    \tnull\n\t\t    }\n\t\t    <List>\n\t\t    {\n\t\t    \tnotes.map((_note,_index) =>{\n\t\t    \t\t//console.log(_index)\n\t\t    \t\t///this is the individual item \n\t\t    \t\treturn(\n\t\t    \t\t\t<div key={_index}>\n\t\t    \t\t\t\t<SidebarItem \n\t\t    \t\t\t\t_note={_note} \t\n\t\t    \t\t\t\t_index={_index}\n\t\t    \t\t\t\tselectedNoteIndex={selectedNoteIndex}\n\t\t    \t\t\t\tselectedNote={this.selectNote}\t\n                            deleteNote={this.deleteNote}\n\t\t    \t\t\t\t/>\n\t\t    \t\t\t\t<Divider></Divider>\n                       </div>\n\t\t    \t\t\t)\n\t\t    \t})\n\t\t    }\n\n\t\t    </List>\n\t\t\t</div>\n\t\t\t)\n\t}\n\t}\n\t//on clicking the new note button,the addingNote is true\n\tnewNoteBtnClick =() =>{\n\t\t//to ensure that every time the title is clicked we dont have the previous tile we \n\t\t//set the title back to null\n\t\tthis.setState({addingNote :!this.state.addingNote,title:null})\n\t\t//console.log(\"btn clicked\")\n\t}\n\tupdateTitle =(txt)=>{\n\t\t\tthis.setState({title:txt})\n\t}\n\t//passing props from siderbar item then to app.js\n\tnewNote =()=>{\n\t\tthis.props.newNote(this.state.title);\n\t\tthis.setState({title:null,addingNote:false})\n\t}\n\t\t//passing props from siderbar item then to app.js\n\tselectNote = (note,index) =>this.props.selectNote(note,index)\n\tdeleteNote = (note) =>this.props.deleteNote(note)\n\n}\nexport default withStyles(styles)(Sidebar)","const styles = theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    height: 'calc(100% - 35px)',\n    position: 'absolute',\n    left: '0',\n    width: '300px',\n    boxShadow: '0px 0px 2px black'\n  },\n  titleInput: {\n    height: '50px',\n    boxSizing: 'border-box',\n    border: 'none',\n    padding: '5px',\n    fontSize: '24px',\n    width: 'calc(100% - 300px)',\n    backgroundColor: '#29487d',\n    color: 'white',\n    paddingLeft: '50px'\n  },\n  editIcon: {\n    position: 'absolute',\n    left: '310px',\n    top: '12px',\n    color: 'white',\n    width: '10',\n    height: '10'\n  },\n  editorContainer: {\n    width:'50%',\n    height: '100%',\n    boxSizing: 'border-box'\n  }\n});\n\nexport default styles;","import React from 'react';\nimport ReactQuill from 'react-quill';\nimport debounce from '../Helper.js';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './Styles.js';\n\n//this is the place where you edit the body and title\nclass Editor extends React.Component{\n\t//that is why we have text an d tile in state with an id\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state ={\n\t\t\ttext:\"\",\n\t\t\ttitle:\"\",\n\t\t\tid:\"\",\n\t\t}\n\t}\n\t//when the editor component mount it shows the selected note\n\tcomponentDidMount(){\n\t\tthis.setState({\n\t\t\ttext:this.props.selectedNote.body,\n\t\t\ttitle:this.props.selectedNote.title,\n\t\t\tid:this.props.selectedNote.id\n\t\t})\n\t}\n\t//when updated \n\t//another item is selected it shows the data of this new note\n\tcomponentDidUpdate(){\n\t\t//we first endure that the note selected is not the same as as the selected one\n\t\t//that is  selecting the same note\n\t\tif(this.props.selectedNote.id !==this.state.id){\n\t\t\tthis.setState({\n\t\t\ttext:this.props.selectedNote.body,\n\t\t\ttitle:this.props.selectedNote.title,\n\t\t\tid:this.props.selectedNote.id\n\t\t})\n\t\t}\n\t}\n\trender(){\n\t\tconst {classes} = this.props\n\t\treturn(\n\t\t\t<div className={classes.editorContainer}> \n\n\t\t\t<input \n\t\t\tclassName={classes.titleInput}\n\t\t\tplaceholder ='Note title'\n\t\t\tvalue={this.state.title ? this.state.title: ''}\n\t\t\tonChange={(e)=> this.updateTitle(e.target.value)}\n\t\t\t />\n\t\t <EditIcon className={classes.editIcon}/>\n\t\t\t\n\t\t\t<ReactQuill \n\t\t\tvalue={this.state.text} \n\t\t\tonChange={this.updateBody}>\n\t\t\t</ReactQuill>\n\t\t\t</div>\n\t\t\t)\n\t}\n\t//updates the body\n\tupdateTitle =async(val)=>{\n   //this function is async such that it can update title before it updates the state\n\tawait this.setState({title :val});\n\tthis.update()\n\n\t}\n\t//updates the body\n\tupdateBody = async(val) =>{\n  //this function is async such that it can update title before it updates the state\n\n\t\tawait this.setState({text :val});\n\t\tthis.update()\n\t}\n\t//so before updatin we wait for 1.5s after the user is done typing\n\tupdate = debounce(()=>{\n\t\t//after waiting we pass it as props to the app function in the noteUpdate\n     //console.log(\"updating database\")\n     this.props.noteUpdate(\n     \t{ id:this.state.id,\n     \t  title:this.state.title,\n     \t   body:this.state.text,\n     \t})\n\t},1500)\n}\nexport default withStyles(styles)(Editor)","import React from 'react';\nimport  \"./App.css\"\nimport Sidebar from \"./sidebar/Sidebar.js\"\nimport Editor from \"./editor/Editor.js\"\nimport ls from \"local-storage\"\n\nclass App extends React.Component{\n//we initialise the notes an empty array \n//the selectedNoteIndex and selected note are null since we havent selected any note\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tselectedNoteIndex:null,\n\t\t\tselectedNote:null,\n\t\t\tnotes:[],\n      \n\t\t}\n\t}\n  //in this componentDid Mount is where the local storage goes so that\n  //when you  re-open your browser the items you placed in are still there\n   componentDidMount(){\n    //console.log(this.state.notes)\n    //this ensures that the notes are initialised in the local storage\n    this.setState({\n      notes : ls.get('notes') || []\n    })\n}\n render(){\n  //we destructure the state for easier use\n \tconst {selectedNoteIndex,notes,selectedNote} =this.state\n\n  //console.log(notes)\n   return (\n   \t<div className=\"app-container\">\n    {/*the sidebar component takes in the index of the note selected,\n    //the select note to dislay it in the editor\n    //delete note to  get the note to be deleted\n    //the new note to get data for the new note \n    //and the notes displayed in it\n  */}\n   \t<Sidebar \n    notes={notes} \n    selectedNoteIndex={selectedNoteIndex}\n    deleteNote={this.deleteNote}\n    selectNote={this.selectNote}\n    newNote={this.newNote}\n     />\n   {/*the editcr component only showss up on selecting a note \n   that is what this ternary operator needs\n   otherwise it wont show\n */}\n     {\n      this.state.selectedNote  ?\n       <Editor \n      selectedNote={selectedNote}\n      selectedNoteIndex={selectedNoteIndex}\n      notes={notes}\n      noteUpdate={this.noteUpdate}\n     /> :null\n     }\n </div>\n   \t)\n }\n   ///a note is selected using this select note function\n   ///such that it can be displayed in the editor component\n \nselectNote =(note,index)=>{\n  //this function picks up the note and its index and sets it equal to \n  //the selectedNote and selectedNote index therefore showing up in\n  //the editor component\n  this.setState({\n    selectedNoteIndex:index,\n    selectedNote:note\n  })\n}\n\n//this is what allows you to update the text in the note \n//and be effected in the state\n\nnoteUpdate =(noteObj)=>{\n /// console.log(noteObj)\n /// so what i do is to return all the other notes except the one i want \n /// to update using the spread operator\n /// so i return a new obj inits place with new title\nthis.setState((state)=>({\n  notes :[\n    noteObj,\n    ...state.notes.filter(note => note.id !== noteObj.id),  \n  ]\n}))\n//console.log(this.state.notes)\nls.set('notes',this.state.notes)\n }\n// the function is async to update the state write after sometime beacuse of the debounce function\n deleteNote =async(note)=>{\n  //console.log(note)\n  //the first case is incase the note in we want to delete is the one we selected\n  //we need the index so we look for the index of this note we want to delete in the notes array\nconst noteIndex = this.state.notes.indexOf(note)\n//console.log(noteIndex)\nif(this.state.selectedNoteIndex === noteIndex){\n  //so this is to ensure that we set the selectedNodeIndex and selectedNote to null\n  //such that it doesnt appear in the editor any more\n  this.setState({selectedNote:null,selectedNoteIndex:null})\n  //after that i pick the id of the selected note and declare it\n   const id =note.id;\n   await  this.setState({\n  notes :this.state.notes.filter(note => note.id !== id)\n})//\n  //console.log(this.state.notes)\n  ls.set('notes',this.state.notes)\n}else{\n  //in this case if the array of notes is longer than one\n  //we just select the next object as selectedNote\n  this.state.length > 1 ?\n  //we selected note becomes the one in the notes array whose index is less by one as the array has reduced\n  //the selectednoteIndex is the indexof the one deleted minus one\n  this.selectNote(this.state.notes[this.state.selectedNoteIndex -1],this.state.selectedNoteIndex - 1)\n  //if the list item was only one and it goes we cant slected any so the selectedNote and the selectedNoteIndex is null\n  :   this.setState({selectedNote:null,selectedNoteIndex:null})\n  //repeat the same procedure by filtering out the one with id of the note seleected\n  const id =note.id;\n await this.setState({\n  notes :this.state.notes.filter(note => note.id !== id)\n})\n  //console.log(this.state.notes)\n    ls.set('notes',this.state.notes)\n}\n//else ends here\n\n }//delete function ends here\n\n//this function captures a new note and adds it to the array\n//it comes with a title from the sidebar component\n newNote = async(title) =>{\n  //we create the new object an id you know to make it look cool\n  ///so far the body is empty\n    const note ={\n      id:Math.floor(Math.random()*100),\n      title:title,\n      body:'',\n    };\n\nconst newId =Math.floor(Math.random()*100)\nawait this.setState({notes:[note,...this.state.notes]})\n//we ensure that we update local storage everytime we set state\n    ls.set('notes',this.state.notes)\n//to ensure that on creating a new note it is opened in the note editor,we get \n//its position in the array of notes and since we want to match this new note with itself \n//in the array and since it is one ,we know its index is zero\n const newNoteIndex= this.state.notes.indexOf(this.state.notes.filter(note => note === note)[0])\n //console.log(newNoteIndex)\n await this.setState({selectedNote:this.state.notes[newNoteIndex],selectedNoteIndex:newNoteIndex})\n    ls.set('notes',this.state.notes)\n }\n\n }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}